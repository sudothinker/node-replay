// Generated by CoffeeScript 1.8.0
var DNS, HTTP, HTTPS, ProxyRequest, Replay, URL, httpRequest, httpsRequest, original_lookup;

DNS = require("dns");

HTTP = require("http");

HTTPS = require("https");

ProxyRequest = require("./proxy");

Replay = require("./replay");

URL = require("url");

httpRequest = HTTP.request;

httpsRequest = HTTPS.request;

HTTP.request = function(options, callback) {
  var hostname, request;
  if (typeof options === "string" || options instanceof String) {
    options = URL.parse(options);
  }
  if (options.headers && options.headers["Upgrade"] === "websocket") {
    return httpRequest(options, callback);
  }
  hostname = options.hostname || (options.host && options.host.split(":")[0]) || "localhost";
  if (Replay.isLocalhost(hostname) || Replay.isPassThrough(hostname)) {
    return httpRequest(options, callback);
  }
  request = new ProxyRequest(options, Replay.chain.start);
  if (callback) {
    request.once("response", callback);
  }
  return request;
};

HTTP.get = function(options, callback) {
  var request;
  request = HTTP.request(options, callback);
  request.end();
  return request;
};

HTTPS.request = function(options, callback) {
  var hostname, request;
  if (typeof options === "string" || options instanceof String) {
    options = URL.parse(options);
  }
  if (options.headers && options.headers["Upgrade"] === "websocket") {
    return httpsRequest(options, callback);
  }
  hostname = options.hostname || (options.host && options.host.split(":")[0]) || "localhost";
  if (Replay.isLocalhost(hostname) || Replay.isPassThrough(hostname)) {
    return httpsRequest(options, callback);
  }
  request = new ProxyRequest(options, Replay.chain.start);
  if (callback) {
    request.once("response", callback);
  }
  return request;
};

HTTPS.get = function(options, callback) {
  var request;
  request = HTTPS.request(options, callback);
  request.end();
  return request;
};

original_lookup = DNS.lookup;

DNS.lookup = function(domain, options, callback) {
  var family, _ref;
  if (typeof options === "function") {
    _ref = [4, options], family = _ref[0], callback = _ref[1];
    options = family;
  } else if (typeof options === "object") {
    family = options.family;
  } else {
    family = options;
  }
  if (Replay.isLocalhost(domain)) {
    if (family === 6) {
      return callback(null, "::1", 6);
    } else {
      return callback(null, "127.0.0.1", 4);
    }
  } else {
    return original_lookup(domain, options, callback);
  }
};

module.exports = Replay;
