// Generated by CoffeeScript 1.8.0
var Catalog, Chain, EventEmitter, MATCH_HEADERS, MODES, Replay, debug, logger, passThrough, passToLocalhost, passWhenBloodyOrCheat, recorder, replay,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Catalog = require("./catalog");

Chain = require("./chain");

debug = require("./debug");

EventEmitter = require("events").EventEmitter;

logger = require("./logger");

passThrough = require("./pass_through");

recorder = require("./recorder");

MODES = ["bloody", "cheat", "record", "replay"];

MATCH_HEADERS = [/^accept/, /^authorization/, /^body/, /^content-type/, /^host/, /^if-/, /^x-/];

Replay = (function(_super) {
  __extends(Replay, _super);

  function Replay(mode) {
    if (!~MODES.indexOf(mode)) {
      throw new Error("Unsupported mode '" + mode + "', must be one of " + (MODES.join(", ")) + ".");
    }
    this.chain = new Chain();
    this.mode = mode;
    this._localhosts = {
      "localhost": true,
      '127.0.0.1': true
    };
    this._passThrough = {};
    this._dropped = {};
    this.catalog = new Catalog(this);
    this.headers = MATCH_HEADERS;
    this.on("error", (function(_this) {
      return function(error, url) {
        return debug("Replay: " + (error.message || error));
      };
    })(this));
  }

  Replay.prototype.use = function(proxy) {
    return this.chain.prepend(proxy);
  };

  Replay.prototype.passThrough = function() {
    var host, hosts, _i, _len, _results;
    hosts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.reset.apply(this, hosts);
    _results = [];
    for (_i = 0, _len = hosts.length; _i < _len; _i++) {
      host = hosts[_i];
      _results.push(this._passThrough[host] = true);
    }
    return _results;
  };

  Replay.prototype.isPassThrough = function(host) {
    var domain;
    domain = host.replace(/^[^.]+/, '*');
    return !!(this._passThrough[host] || this._passThrough[domain] || this._passThrough["*." + host]);
  };

  Replay.prototype.drop = function() {
    var host, hosts, _i, _len, _results;
    hosts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.reset.apply(this, hosts);
    _results = [];
    for (_i = 0, _len = hosts.length; _i < _len; _i++) {
      host = hosts[_i];
      _results.push(this._dropped[host] = true);
    }
    return _results;
  };

  Replay.prototype.isDropped = function(host) {
    var domain;
    domain = host.replace(/^[^.]+/, '*');
    return !!(this._dropped[host] || this._dropped[domain] || this._dropped['*.#{host}']);
  };

  Replay.prototype.localhost = function() {
    var host, hosts, _i, _len, _results;
    hosts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.reset.apply(this, hosts);
    _results = [];
    for (_i = 0, _len = hosts.length; _i < _len; _i++) {
      host = hosts[_i];
      _results.push(this._localhosts[host] = true);
    }
    return _results;
  };

  Replay.prototype.isLocalhost = function(host) {
    var domain;
    domain = host.replace(/^[^.]+/, '*');
    return !!(this._localhosts[host] || this._localhosts[domain] || this._localhosts["*." + host]);
  };

  Replay.prototype.reset = function() {
    var host, hosts, _i, _len, _results;
    hosts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = hosts.length; _i < _len; _i++) {
      host = hosts[_i];
      delete this._localhosts[host];
      delete this._passThrough[host];
      _results.push(delete this._dropped[host]);
    }
    return _results;
  };

  Replay.prototype.__defineGetter__("fixtures", function() {
    return this.catalog.getFixturesDir();
  });

  Replay.prototype.__defineSetter__("fixtures", function(dir) {
    return this.catalog.setFixturesDir(dir);
  });

  return Replay;

})(EventEmitter);

replay = new Replay(process.env.REPLAY || "replay");

passWhenBloodyOrCheat = function(request) {
  return replay.isPassThrough(request.url.hostname) || (replay.mode === "cheat" && !replay.isDropped(request.url.hostname));
};

passToLocalhost = function(request) {
  return replay.isLocalhost(request.url.hostname) || replay.mode === "bloody";
};

replay.use(passThrough(passWhenBloodyOrCheat));

replay.use(recorder(replay));

replay.use(logger(replay));

replay.use(passThrough(passToLocalhost));

module.exports = replay;
